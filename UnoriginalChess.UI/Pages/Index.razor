@page "/"

<MudDropContainer T="DropItem" Items="Items" CanDropClass="mud-border-info" NoDropClass="mud-border-error" CanDrop="@CanMovePiece" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="border-2 border-solid mud-border-lines-default">
    <ChildContent>
        @if (BoardIsFlipped)
        {
            @for (int r = 0; r < 8; r++)
            {
                var row = r.ToString();
                <div class="d-flex">
                    @for (int c = 0; c < 8; c++)
                    {
                        var col = c.ToString();
                        <MudDropZone T="DropItem" Identifier="@($"{row}{col}")" DraggingClass="mud-theme-success" Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:64px;width:64px;"/>
                    }
                </div>
            }
        }
        else
        {
            @for (int r = 7; r >= 0; r--)
            {
                var row = r.ToString();
                <div class="d-flex">
                    @for (int c = 0; c < 8; c++)
                    {
                        var col = c.ToString();
                        <MudDropZone T="DropItem" Identifier="@($"{row}{col}")" DraggingClass="mud-theme-success" Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:64px;width:64px;"/>
                    }
                </div>
            }
        }
    </ChildContent>
    <ItemRenderer>
        <div class="d-flex justify-center align-center flex-grow-1">
            <MudIcon Icon="@context.Icon" Color="@context.Color" Size="Size.Large" />
        </div>
    </ItemRenderer>
</MudDropContainer>

<MudText Typo="Typo.h6">@GameMessage</MudText>

<MudButton Variant="Variant.Filled" OnClick="_ => FlipBoard()">Flip board</MudButton>